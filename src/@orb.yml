version: 2.1

description: >
  Build images and push them to the Amazon Elastic Container Registry

examples:
  simple_build_and_push:
    description: Log into AWS, build and push image to Amazon ECR

    usage:
      version: 2.1

      orbs:
        aws-ecr: circleci/aws-ecr@1.0.0

      workflows:
        build_and_push_image:
          jobs:
            # build and push image to ECR
            - aws-ecr/build_and_push_image:

                # required if any necessary secrets are stored via Contexts
                context: myContext

                # AWS profile name, defaults to "default"
                profile-name: myProfileName

                # name of env var storing your AWS Access Key ID, defaults to AWS_ACCESS_KEY_ID
                aws-access-key-id: ACCESS_KEY_ID_ENV_VAR_NAME

                # name of env var storing your AWS Secret Access Key, defaults to AWS_SECRET_ACCESS_KEY
                aws-secret-access-key: SECRET_ACCESS_KEY_ENV_VAR_NAME

                # name of env var storing your AWS region, defaults to AWS_REGION
                region: AWS_REGION_ENV_VAR_NAME

                # name of env var storing your ECR account URL, defaults to AWS_ECR_ACCOUNT_URL
                account-url: AWS_ECR_ACCOUNT_URL_ENV_VAR_NAME

                # name of your ECR repository
                repo: myECRRepository

                # set this to true to create the repository if it does not already exist, defaults to "false"
                create-repo: true

                # ECR image tag, defaults to "latest"
                tag: myECRRepoTag

                # name of Dockerfile to use, defaults to "Dockerfile"
                dockerfile: myDockerfile

                # path to Dockerfile, defaults to . (working directory)
                path: pathToMyDockerfile

orbs:
  aws-cli: circleci/aws-cli@0.1.7

executors:
  default:
    machine: true

commands:
  ecr-login:
    description: "Authenticate into the Amazon ECR service"

    parameters:
      region:
        description: >
          Name of env var storing your AWS region information,
          defaults to AWS_REGION
        type: env_var_name
        default: AWS_REGION

    steps:
      - run:
          name: Log into Amazon ECR
          command: |
            # aws ecr get-login returns a login command w/ a temp token
            LOGIN_COMMAND=$(aws ecr get-login --no-include-email --region $<< parameters.region >>)

            # save it to an env var & use that env var to login
            $LOGIN_COMMAND

  build-image:
    description: "Build a docker image"

    parameters:
      account-url:
        type: env_var_name
        description: >
          The Amazon ECR account URL that maps to an AWS account,
          e.g. {awsAccountNum}.dkr-ecr.us-west-2.amazonaws.com
        default: AWS_ECR_ACCOUNT_URL

      repo:
        type: string
        description: Name of an Amazon ECR repository

      tag:
        description: A docker image tag (default = latest)
        type: string
        default: "latest"

      dockerfile:
        description: Name of dockerfile to use. Defaults to Dockerfile.
        type: string
        default: Dockerfile

      path:
        description: Path to the directory containing your Dockerfile and build context. Defaults to . (working directory).
        type: string
        default: .

      extra-build-args:
        description: >
          Extra flags to pass to docker build. For examples, see
          https://docs.docker.com/engine/reference/commandline/build
        type: string
        default: ""

    steps:
      - run:
          name: Build docker image
          command: |
            docker build \
              <<#parameters.extra-build-args>><<parameters.extra-build-args>><</parameters.extra-build-args>> \
              -f << parameters.dockerfile >> \
              -t $<< parameters.account-url >>/<< parameters.repo >>:<< parameters.tag >> \
              << parameters.path >>

  push-image:
    description: "Push a container image to the Amazon ECR registry"

    parameters:
      account-url:
        type: env_var_name
        description: >
          Env var storing Amazon ECR account URL that maps to an AWS account,
          e.g. {awsAccountNum}.dkr-ecr.us-west-2.amazonaws.com
          defaults to AWS_ECR_ACCOUNT_URL
        default: AWS_ECR_ACCOUNT_URL

      repo:
        type: string
        description: Name of an Amazon ECR repository

      tag:
        description: A docker image tag (default = latest)
        type: string
        default: "latest"

    steps:
      - run:
          name: Push image to Amazon ECR
          command: "docker push $<< parameters.account-url >>/<< parameters.repo >>:<< parameters.tag >>"

jobs:
  build_and_push_image:
    description: >
      Install AWS CLI, if needed, and configure. Log into Amazon ECR
      and push image to repository. Requires environment variables
      for AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY. We recommend
      these be saved in a Project (https://circleci.com/docs/2.0/env-vars/#setting-an-environment-variable-in-a-project)
      or in Contexts (https://circleci.com/docs/2.0/contexts).
    executor: <<parameters.executor>>

    parameters:
      executor:
        description: executor to use for this job
        type: executor
        default: default

      profile-name:
        description: AWS profile name to be configured.
        type: string
        default: "default"

      aws-access-key-id:
        description: >
          AWS access key id for IAM role. Set this to the name of
          the environment variable you will set to hold this
          value, i.e. AWS_ACCESS_KEY.
        type: env_var_name
        default: AWS_ACCESS_KEY_ID

      aws-secret-access-key:
        description: >
          AWS secret key for IAM role. Set this to the name of
          the environment variable you will set to hold this
          value, i.e. AWS_SECRET_ACCESS_KEY.
        type: env_var_name
        default: AWS_SECRET_ACCESS_KEY

      region:
        description: >
          Name of env var storing your AWS region information,
          defaults to AWS_REGION
        type: env_var_name
        default: AWS_REGION

      account-url:
        type: env_var_name
        description: >
          Env var storing Amazon ECR account URL that maps to an AWS account,
          e.g. {awsAccountNum}.dkr-ecr.us-west-2.amazonaws.com
          defaults to AWS_ECR_ACCOUNT_URL
        default: AWS_ECR_ACCOUNT_URL

      repo:
        type: string
        description: A URI to an Amazon ECR repository

      create-repo:
        type: boolean
        description: Should the repo be created if it does not exist?
        default: false

      tag:
        type: string
        description: Docker tag (default = latest)
        default: "latest"

      dockerfile:
        description: Name of dockerfile to use. Defaults to Dockerfile.
        type: string
        default: Dockerfile

      path:
        description: Path to the directory containing your Dockerfile and build context. Defaults to . (working directory).
        type: string
        default: .

      extra-build-args:
        description: >
          Extra flags to pass to docker build. For examples, see
          https://docs.docker.com/engine/reference/commandline/build
        type: string
        default: ""

      after-checkout:
        description: Optional steps to run after checking out the code.
        type: steps
        default: []

      before-build:
        description: Optional steps to run before building the docker image.
        type: steps
        default: []

      after-build:
        description: Optional steps to run after building the docker image.
        type: steps
        default: []

    steps:
      - aws-cli/install

      - aws-cli/configure:
          profile-name: << parameters.profile-name >>
          aws-access-key-id: << parameters.aws-access-key-id >>
          aws-secret-access-key: << parameters.aws-secret-access-key >>
          aws-region: << parameters.region >>

      - checkout

      - when:
          name: Run after-checkout lifecycle hook steps.
          condition: << parameters.after-checkout >>
          steps: << parameters.after-checkout >>

      - ecr-login:
          region: << parameters.region >>

      - when:
          name: Run before-build lifecycle hook steps.
          condition: << parameters.before-build >>
          steps: << parameters.before-build >>

      - build-image:
          account-url: << parameters.account-url >>
          repo: << parameters.repo >>
          tag: << parameters.tag >>
          dockerfile: << parameters.dockerfile >>
          path: << parameters.path >>
          extra-build-args: << parameters.extra-build-args >>

      - when:
          name: Run after-build lifecycle hook steps.
          condition: << parameters.after-build >>
          steps: << parameters.after-build >>

      - when:
          condition: <<parameters.create-repo>>
          steps:
            - run: aws --region $<<parameters.region>> ecr create-repository --repository-name <<parameters.repo>> --profile <<parameters.profile-name>>

      - push-image:
          account-url: << parameters.account-url >>
          repo: << parameters.repo >>
          tag: << parameters.tag >>
