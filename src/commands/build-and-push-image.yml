description: >
  Install AWS CLI, if needed, and configure. Log into Amazon ECR
  and push image to repository. Requires environment variables
  for AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY. We recommend
  these be saved in a Project (https://circleci.com/docs/2.0/env-vars/#setting-an-environment-variable-in-a-project)
  or in Contexts (https://circleci.com/docs/2.0/contexts).

parameters:
  executor:
    type: executor
    default: default
    description: executor to use for this job

  setup-remote-docker:
    type: boolean
    default: false
    description: >
      Setup and use CircleCI's remote Docker environment for Docker and
      docker-compose commands? Not required if using the default executor

  profile-name:
    type: string
    default: "default"
    description: AWS profile name to be configured.

  aws-access-key-id:
    type: env_var_name
    default: AWS_ACCESS_KEY_ID
    description: >
      AWS access key id for IAM role. Set this to the name of
      the environment variable you will set to hold this
      value, i.e. AWS_ACCESS_KEY.

  aws-secret-access-key:
    type: env_var_name
    default: AWS_SECRET_ACCESS_KEY
    description: >
      AWS secret key for IAM role. Set this to the name of
      the environment variable you will set to hold this
      value, i.e. AWS_SECRET_ACCESS_KEY.

  region:
    type: env_var_name
    default: AWS_REGION
    description: >
      Name of env var storing your AWS region information,
      defaults to AWS_REGION

  account-url:
    type: env_var_name
    default: AWS_ECR_ACCOUNT_URL
    description: >
      Env var storing Amazon ECR account URL that maps to an AWS account,
      e.g. {awsAccountNum}.dkr.ecr.us-west-2.amazonaws.com
      defaults to AWS_ECR_ACCOUNT_URL

  repo:
    type: string
    description: Name of an Amazon ECR repository

  create-repo:
    type: boolean
    default: false
    description: Should the repo be created if it does not exist?

  repo-scan-on-push:
    type: boolean
    default: true
    description: Should the created repo be security scanned on push?

  tag:
    type: string
    default: "latest"
    description: A comma-separated string containing docker image tags to build and push (default = latest)

  checkout:
    type: boolean
    default: true
    description: >
      Boolean for whether or not to checkout as a first step. Default is true.

  attach-workspace:
    type: boolean
    default: false
    description: >
      Boolean for whether or not to attach to an existing workspace. Default
      is false.

  workspace-root:
    type: string
    default: "."
    description: >
      Workspace root path that is either an absolute path or a path relative
      to the working directory. Defaults to '.' (the working directory)

  dockerfile:
    type: string
    default: Dockerfile
    description: Name of dockerfile to use. Defaults to Dockerfile.

  path:
    type: string
    default: .
    description: Path to the directory containing your Dockerfile and build context. Defaults to . (working directory).

  extra-build-args:
    type: string
    default: ""
    description: >
      Extra flags to pass to docker build. For examples, see
      https://docs.docker.com/engine/reference/commandline/build

  no-output-timeout:
    type: string
    default: "10m"
    description: >
      The amount of time to allow the docker build command to run before timing out (default is `10m`)

steps:
  - when:
      condition: <<parameters.checkout>>
      steps:
        - checkout

  - aws-cli/install

  - aws-cli/setup:
      profile-name: <<parameters.profile-name>>
      aws-access-key-id: <<parameters.aws-access-key-id>>
      aws-secret-access-key: <<parameters.aws-secret-access-key>>
      aws-region: <<parameters.region>>

  - when:
      condition: <<parameters.attach-workspace>>
      steps:
        - attach_workspace:
            at: <<parameters.workspace-root>>

  - when:
      condition: <<parameters.setup-remote-docker>>
      steps:
        - setup_remote_docker

  - ecr-login:
      profile-name: <<parameters.profile-name>>
      region: <<parameters.region>>
      account-url: <<parameters.account-url>>

  - build-image:
      account-url: <<parameters.account-url>>
      repo: <<parameters.repo>>
      tag: <<parameters.tag>>
      dockerfile: <<parameters.dockerfile>>
      path: <<parameters.path>>
      extra-build-args: <<parameters.extra-build-args>>
      no-output-timeout: <<parameters.no-output-timeout>>

  - when:
      condition: <<parameters.create-repo>>
      steps:
        - run: |
            aws ecr describe-repositories --profile <<parameters.profile-name>> --region $<<parameters.region>> --repository-names <<parameters.repo>> > /dev/null 2>&1 || \
            aws ecr create-repository --profile <<parameters.profile-name>> --region $<<parameters.region>> --repository-name <<parameters.repo>> --image-scanning-configuration scanOnPush=<<parameters.repo-scan-on-push>>

  - push-image:
      account-url: <<parameters.account-url>>
      repo: <<parameters.repo>>
      tag: <<parameters.tag>>
