description: >
  Install AWS CLI Version 2 and configure credentials if needed.
  Log into Amazon ECR, build and push a Docker image to the specified repository.
  NOTE: Some commands may not work with AWS CLI Version 1.
parameters:
  account_id:
    type: string
    default: ${AWS_ACCOUNT_ID}
    description: >
      The 12 digit AWS id associated with the ECR account.
      This field is required

  profile_name:
    default: default
    description: AWS profile name to be configured.
    type: string

  region:
    default: ${AWS_DEFAULT_REGION}
    description: >
      Name of env var storing your AWS region information, defaults to
      AWS_DEFAULT_REGION
    type: string

  public_registry:
    type: boolean
    description: >
      Set to true if building and pushing an image to a Public Registry on ECR.
    default: false

  repo:
    description: Name of an Amazon ECR repository
    type: string

  create_repo:
    default: false
    description: Should the repo be created if it does not exist?
    type: boolean

  repo_scan_on_push:
    default: true
    description: Should the created repo be security scanned on push?
    type: boolean

  tag:
    default: latest
    description: >
      A comma-separated string containing docker image tags to build and push
      (default = latest)
    type: string

  attach_workspace:
    default: false
    description: >
      Boolean for whether or not to attach to an existing workspace. Default is
      false.
    type: boolean

  workspace_root:
    default: .
    description: >
      Workspace root path that is either an absolute path or a path relative to
      the working directory. Defaults to '.' (the working directory)
    type: string

  setup_remote_docker:
    default: false
    description: >
      Setup and use CircleCI's remote Docker environment for Docker and
      docker-compose commands? Not required if using the default executor
    type: boolean

  remote_docker_version:
    default: ""
    description: Specific remote docker version
    type: string

  remote_docker_layer_caching:
    default: false
    description: >
      Enable Docker layer caching if using remote Docker engine. Defaults to
      false.
    type: boolean

  dockerfile:
    default: Dockerfile
    description: Name of dockerfile to use. Defaults to Dockerfile.
    type: string

  container_registry_login:
    description:  >-
      Enable login to different image container registries such as
      DockerHub, Heroku or Github. Defaults to false.
    type: boolean
    default: false

  registry_login:
    description:  >-
      Custom container registry login step
      e.g docker -u $DOCKER_ID -p $DOCKER_PASSWORD
    type: steps
    default:
      - run: >-
          echo "Error - container_registry_login parameter is set to true without
           any registry_login steps."
      - run: exit 1

  path:
    default: .
    description: >-
      Path to the directory containing your Dockerfile. Defaults to . (working directory).
    type: string

  build_path:
    default: .
    description: >-
      Path to the directory containing your build context. Defaults to . (working directory).
    type: string

  extra_build_args:
    default: ""
    description: >
      Extra flags to pass to docker build. For examples, see
      https://docs.docker.com/engine/reference/commandline/build
    type: string

  no_output_timeout:
    default: 10m
    description: >
      The amount of time to allow the docker build command to run before timing
      out (default is `10m`)
    type: string

  skip_when_tags_exist:
    default: false
    description: Whether to skip image building if all specified tags already exist in ECR
    type: boolean

  platform:
    type: string
    default: "linux/amd64"
    description: Platform targets for the docker image, multi arch images. Ex. linux/amd64,linux/arm64

  public_registry_alias:
    type: string
    default: ${AWS_ECR_PUBLIC_REGISTRY_ALIAS}
    description: >
      The public registry alias for your public repositories. This parameter is required if pushing to a public repository
      It can be found in the Amazon ECR console > Public Registries.

  push_image:
    type: boolean
    default: true
    description: Set to false to build an image without pushing to repository.  Defaults to true.

  lifecycle_policy_path:
    type: string
    default: ""
    description: |
      The path to the .json file containing the lifecycle policy to be applied to a specified repository in AWS ECR.

  checkout:
    default: true
    description: |
      Boolean for whether or not to checkout as a first step. Default is true.
    type: boolean

  set_repo_policy:
    default: false
    description: Should a repository policy be set?
    type: boolean

  repo_policy_path:
    type: string
    default: ""
    description: |
      The path to the .json file containing the repository policy to be applied to a specified repository in AWS ECR.
  aws_domain:
    type: string
    default: "amazonaws.com"
    description: >
      The AWS domain for your region, e.g in China, the AWS domain is amazonaws.com.cn
      The default value is amazonaws.com

  auth:
    description: |
      The authentication method used to access your AWS account. Import the aws-cli orb in your config and
      provide the aws-cli/setup command to authenticate with your preferred method. View examples for more information.
    type: steps

  repo_encryption_type:
    type: enum
    description: The encryption type to use.
    default: "AES256"
    enum: ["AES256", "KMS"]

  repo_encryption_kms_key:
    type: string
    description: >
      If you use the KMS encryption type, specify the KMS key to use for encryption.
      The alias, key ID, or full ARN of the KMS key can be specified.
    default: ""

steps:
  - when:
      condition: <<parameters.checkout>>
      steps:
        - checkout
  - when:
      condition: <<parameters.attach_workspace>>
      steps:
        - attach_workspace:
            at: <<parameters.workspace_root>>
  - when:
      condition:
        and:
          - <<parameters.remote_docker_layer_caching>>
          - not: <<parameters.setup_remote_docker>>
      steps:
        - run: echo "Docker Layer Caching requires Setup Remote Docker command" && exit 1
  - when:
      condition: <<parameters.setup_remote_docker>>
      steps:
        - setup_remote_docker:
            docker_layer_caching: <<parameters.remote_docker_layer_caching>>
            version: <<parameters.remote_docker_version>>
  - steps: <<parameters.auth>>
  - ecr_login:
      profile_name: <<parameters.profile_name>>
      region: <<parameters.region>>
      account_id: <<parameters.account_id>>
      public_registry: <<parameters.public_registry>>
  - when:
      condition: <<parameters.create_repo>>
      steps:
        - create_repo:
            profile_name: <<parameters.profile_name>>
            region: <<parameters.region>>
            repo: <<parameters.repo>>
            repo_scan_on_push: <<parameters.repo_scan_on_push>>
            public_registry: <<parameters.public_registry>>
            repo_encryption_type: <<parameters.repo_encryption_type>>
            encryption_kms_key: <<parameters.repo_encryption_kms_key>>
  - when:
      condition: <<parameters.set_repo_policy>>
      steps:
        - set_repo_policy:
            profile_name: <<parameters.profile_name>>
            region: <<parameters.region>>
            repo: <<parameters.repo>>
            public_registry: <<parameters.public_registry>>
            repo_policy_path: <<parameters.repo_policy_path>>
  - when:
      condition: <<parameters.container_registry_login>>
      steps: <<parameters.registry_login>>

  - build_image:
      account_id: <<parameters.account_id>>
      repo: <<parameters.repo>>
      tag: <<parameters.tag>>
      dockerfile: <<parameters.dockerfile>>
      path: <<parameters.path>>
      extra_build_args: <<parameters.extra_build_args>>
      no_output_timeout: <<parameters.no_output_timeout>>
      skip_when_tags_exist: <<parameters.skip_when_tags_exist>>
      profile_name: <<parameters.profile_name>>
      platform: <<parameters.platform>>
      region: <<parameters.region>>
      public_registry: <<parameters.public_registry>>
      push_image: <<parameters.push_image>>
      lifecycle_policy_path: <<parameters.lifecycle_policy_path>>
      public_registry_alias: <<parameters.public_registry_alias>>
      build_path: <<parameters.build_path>>
      aws_domain: <<parameters.aws_domain>>
