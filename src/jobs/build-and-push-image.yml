description: >
  Install AWS CLI, if needed, and configure. Log into Amazon ECR
  and push image to repository. Requires environment variables
  for AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY. We recommend
  these be saved in a Project (https://circleci.com/docs/2.0/env-vars/#setting-an-environment-variable-in-a-project)
  or in Contexts (https://circleci.com/docs/2.0/contexts).

executor: << parameters.executor >>

parameters:
  executor:
    description: |
      Executor to use for this job.
    type: executor
    default: default

  registry-id:
    type: env_var_name
    default: AWS_ACCOUNT_ID
    description: >
      The 12 digit AWS id associated with the ECR account.
      This field is required

  profile-name:
    type: string
    default: "default"
    description: AWS profile name to be configured.

  checkout:
    default: true
    description: |
      Boolean for whether or not to checkout as a first step. Default is true.
    type: boolean

  region:
    type: string
    default: ${AWS_DEFAULT_REGION}
    description: >
      AWS region of ECR repository. Defaults to environment variable ${AWS_DEFAULT_REGION}

  public-registry:
    type: boolean
    description: Set to true if building and pushing an image to a Public Registry on ECR.
    default: false

  repo:
    type: string
    description: Name of an Amazon ECR repository

  create-repo:
    type: boolean
    default: false
    description: Should the repo be created if it does not exist?

  repo-scan-on-push:
    type: boolean
    default: true
    description: Should the created repo be security scanned on push?

  tag:
    type: string
    default: "latest"
    description: A comma-separated string containing docker image tags to build and push (default = latest)

  attach-workspace:
    type: boolean
    default: false
    description: >
      Boolean for whether or not to attach to an existing workspace. Default
      is false.

  workspace-root:
    type: string
    default: "."
    description: >
      Workspace root path that is either an absolute path or a path relative
      to the working directory. Defaults to '.' (the working directory)

  setup-remote-docker:
    type: boolean
    default: false
    description: >
      Setup and use CircleCI's remote Docker environment for Docker and
      docker-compose commands? Not required if using the default executor

  remote-docker-version:
    type: string
    default: ""
    description: Specific remote docker version

  remote-docker-layer-caching:
    type: boolean
    default: false
    description: >
      Enable Docker layer caching if using remote Docker engine.
      Requires setup-remote-docker to be set to true. Defaults to false.

  docker-login:
    type: boolean
    default: false
    description: >
      Enable dockerhub authentication. Defaults to false.

  dockerhub-username:
    type: env_var_name
    default: DOCKERHUB_USERNAME
    description: >
      Dockerhub username to be configured. Set this to the name of
      the environment variable you will set to hold this
      value, i.e. DOCKERHUB_USERNAME.

  dockerhub-password:
    type: env_var_name
    default: DOCKERHUB_PASSWORD
    description: >
      Dockerhub password to be configured. Set this to the name of
      the environment variable you will set to hold this
      value, i.e. DOCKERHUB_PASSWORD.

  dockerfile:
    type: string
    default: Dockerfile
    description: Name of dockerfile to use. Defaults to Dockerfile.

  path:
    type: string
    default: .
    description: Path to the directory containing your Dockerfile and build context. Defaults to . (working directory).

  extra-build-args:
    type: string
    default: ""
    description: >
      Extra flags to pass to docker build. For examples, see
      https://docs.docker.com/engine/reference/commandline/build

  no-output-timeout:
    type: string
    default: "10m"
    description: >
      The amount of time to allow the docker build command to run before timing out. Defaults to '10m'

  skip-when-tags-exist:
    type: boolean
    default: false
    description: Whether to skip image building if all specified tags already exist in ECR

  platform:
    type: string
    default: "linux/amd64"
    description: Platform targets for the docker image, multi arch images. Ex. linux/amd64,linux/arm64

  public-registry-alias:
    type: string
    default: ${AWS_ECR_PUBLIC_REGISTRY_ALIAS}
    description: >
      The public registry alias for your public repositories. This parameter is required if pushing to a public repository
      It can be found in the Amazon ECR console > Public Registries.

  push-image:
    type: boolean
    default: true
    description: Set to false to build an image without pushing to repository.  Defaults to true.

  lifecycle-policy-path:
    type: string
    default: ""
    description: |
      The path to the .json file containing the lifecycle policy to be applied to a specified repository in AWS ECR.

  set-repo-policy:
    default: false
    description: Should a repository policy be set?
    type: boolean

  repo-policy-path:
    type: string
    default: ""
    description: |
      The path to the .json file containing the repository policy to be applied to a specified repository in AWS ECR.

  auth:
    description: |
      The authentication method used to access your AWS account. Import the aws-cli orb in your config and
      provide the aws-cli/setup command to authenticate with your preferred method. View examples for more information.
    type: steps

steps:
  - build-and-push-image:
      registry-id: <<parameters.registry-id>>
      repo: <<parameters.repo>>
      tag: <<parameters.tag>>
      dockerfile: <<parameters.dockerfile>>
      path: <<parameters.path>>
      extra-build-args: <<parameters.extra-build-args>>
      no-output-timeout: <<parameters.no-output-timeout>>
      skip-when-tags-exist: <<parameters.skip-when-tags-exist>>
      profile-name: <<parameters.profile-name>>
      platform: <<parameters.platform>>
      region: <<parameters.region>>
      public-registry: <<parameters.public-registry>>
      push-image: <<parameters.push-image>>
      lifecycle-policy-path: <<parameters.lifecycle-policy-path>>
      repo-scan-on-push: <<parameters.repo-scan-on-push>>
      checkout: <<parameters.checkout>>
      attach-workspace: <<parameters.attach-workspace>>
      remote-docker-layer-caching: <<parameters.remote-docker-layer-caching>>
      setup-remote-docker: <<parameters.setup-remote-docker>>
      remote-docker-version: <<parameters.remote-docker-version>>
      workspace-root: <<parameters.workspace-root>>
      create-repo: <<parameters.create-repo>>
      docker-login: <<parameters.docker-login>>
      dockerhub-username: <<parameters.dockerhub-username>>
      dockerhub-password: <<parameters.dockerhub-password>>
      public-registry-alias: <<parameters.public-registry-alias>>
      set-repo-policy: <<parameters.set-repo-policy>>
      repo-policy-path: <<parameters.repo-policy-path>>
      auth: <<parameters.auth>>
