version: 2.1

description: |
  Build images and push them to the Amazon Elastic Container Registry

examples:
  simple_build_and_push:
    description: Log into AWS, build and push image to Amazon ECR
    usage:
      version: 2.1

      orbs:
        aws-ecr: circleci/aws-ecr@1.0.0

      workflows:
        build_and_push_image:
          jobs:
            - aws-ecr/build_and_push_image:
                context: myContext # your context containing AWS login variables
                region: myAwsRegion
                account-url: myAwsAccountId.dkr.ecr.myAwsRegion.amazonaws.com
                repo: myRepo # your Amazon ECR repository
                tag: latest
                dockerfile: Dockerfile
                path: .

orbs:
  aws-cli: circleci/aws-cli@0.0.1

executors:
  default:
    docker:
      - image: circleci/python:3-stretch-browsers

commands:
  ecr-login:
    description: "Authenticate into the Amazon ECR service"
    parameters:
      region:
        type: string
        default: "us-east-1"
    steps:
      - run:
          name: Log into Amazon ECR
          command: "$(aws ecr get-login --no-include-email --region << parameters.region >> )"

  build-image:
    description: "Build a docker image"
    parameters:
      account-url:
        type: string
        description: The Amazon ECR account URL that maps to an AWS account,
                     e.g. {awsAccountNum}.dkr-ecr.us-west-2.amazonaws.com
        default: $AWS_ECR_ACCOUNT_URL
      repo:
        type: string
        description: Name of an Amazon ECR repository
      tag:
        description: A docker image tag (default = latest)
        type: string
        default: "latest"
      dockerfile:
        description: Name of dockerfile to use. Defaults to Dockerfile.
        type: string
        default: Dockerfile
      path:
        description: Path to the directory containing your Dockerfile and build context. Defaults to . (working directory).
        type: string
        default: .
      extra-build-args:
        description: >
          Extra flags to pass to docker build. For examples, see
          https://docs.docker.com/engine/reference/commandline/build
        type: string
        default: ""
    steps:
      - run:
          name: Build docker image
          command: >
            docker build
            <<# parameters.extra-build-args >><< parameters.extra-build-args >><</ parameters.extra-build-args >>
            -f << parameters.dockerfile >>
            -t << parameters.account-url >>/<< parameters.repo >>:<< parameters.tag >>
            << parameters.path >>

  push-image:
    description: "Push a container image to the Amazon ECR registry"
    parameters:
      account-url:
        type: string
        description: The Amazon ECR account URL that maps to an AWS account,
                     e.g. {awsAccountNum}.dkr-ecr.us-west-2.amazonaws.com
        default: $AWS_ECR_ACCOUNT_URL
      repo:
        type: string
        description: Name of an Amazon ECR repository
      tag:
        description: A docker image tag (default = latest)
        type: string
        default: "latest"
    steps:
      - run:
          name: Push image to Amazon ECR
          command: "docker push << parameters.account-url >>/<< parameters.repo >>:<< parameters.tag >>"

jobs:
  build_and_push_image:
    description: Install AWS CLI, if needed, and configure. Log into Amazon ECR
                 and push image to repository. Requires environment variables
                 for AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY. We recommend
                 these be saved in a Project (https://circleci.com/docs/2.0/env-vars/#setting-an-environment-variable-in-a-project) or in
                 Contexts (https://circleci.com/docs/2.0/contexts/).
    executor: default
    parameters:
      profile-name:
        description: AWS profile name to be configured.
        type: string
        default: "default"
      aws-access-key-id:
        description: AWS access key id for IAM role. Set this to the name of
                     the environment variable you will set to hold this
                     value, i.e. $AWS_ACCESS_KEY.
        type: string
        default: $AWS_ACCESS_KEY_ID
      aws-secret-access-key:
        description: AWS secret key for IAM role. Set this to the name of
                     the environment variable you will set to hold this
                     value, i.e. $AWS_SECRET_ACCESS_KEY.
        type: string
        default: $AWS_SECRET_ACCESS_KEY
      region:
        type: string
        description: AWS region to use with the commands (default = us-east-1)
        default: "us-east-1"
      account-url:
        type: string
        description: A directory path local to the job to deploy to S3
      repo:
        type: string
        description: A URI to an Amazon ECR repository
      tag:
        type: string
        description: Docker tag (default = latest)
        default: "latest"
      dockerfile:
        description: Name of dockerfile to use. Defaults to Dockerfile.
        type: string
        default: Dockerfile
      path:
        description: Path to the directory containing your Dockerfile and build context. Defaults to . (working directory).
        type: string
        default: .
      extra-build-args:
        description: >
          Extra flags to pass to docker build. For examples, see
          https://docs.docker.com/engine/reference/commandline/build
        type: string
        default: ""
    steps:
      - aws-cli/install
      - aws-cli/configure:
          profile-name: << parameters.profile-name >>
          aws-access-key-id: << parameters.aws-access-key-id >>
          aws-secret-access-key: << parameters.aws-secret-access-key >>
          region: << parameters.region >>
      - checkout
      - setup_remote_docker
      - ecr-login:
          region: << parameters.region >>
      - build-image:
          account-url: << parameters.account-url >>
          repo: << parameters.repo >>
          tag: << parameters.tag >>
          dockerfile: << parameters.dockerfile >>
          path: << parameters.path >>
          extra-build-args: << parameters.extra-build-args >>
      - push-image:
          account-url: << parameters.account-url >>
          repo: << parameters.repo >>
          tag: << parameters.tag >>
